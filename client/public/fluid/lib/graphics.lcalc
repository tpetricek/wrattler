// Simplistic but something more general may require primitives which take data values as inputs.
// Application module GraphicsRenderer must be loaded for these definitions to work.
// Str → Num
primitive textWidth;

// Str → Num
primitive textHeight;

// List (Num, Num) → (Num, Num)
let pathDimensions = fun ps →
   match length ps == 0 as {
      True → (0, 0);
      False → match unzip ps as (xs, ys) → (max xs, max ys)
   };

// Num → GraphicsElement → GraphicsElement
let x_translate = fun x g → Translate(x, 0, g);

// Num → GraphicsElement → GraphicsElement
let y_translate = fun y g → Translate(0, y, g);

// Point → Point
let transposePoint = fun Point(x, y) → Point(y, x);

// Not a true linear transformation, because text isn't reflected; positions only.
// GraphicsElement → GraphicsElement
letrec fun transpose {
   Polyline(ps) → Polyline(map transposePoint ps);
   Polygon(ps, stroke, fill) → Polygon(map transposePoint ps, stroke, fill);
   Graphic(gs) → Graphic(map transpose gs);
   Text(x, y, str) → Text(y, x, str);
   Translate(x, y, g) → Translate(y, x, transpose g)
};

// See GitHub issue #167. The dimensions (width, height) are measured from the origin.
// GraphicsElement → (Num, Num)
letrec fun dimensions {
   Polyline(ps) → 
      pathDimensions (map (fun Point(x, y) → (x, y)) ps);
   Polygon(ps, _, _) →
      pathDimensions (map (fun Point(x, y) → (x, y)) ps);
   Graphic(gs) → 
      pathDimensions (map dimensions gs);
   Text(x, y, str) →
      // equivalent to pathDimensions [(x, y), (x + textWidth str, y + textHeight str)]
      (x + textWidth str, y + textHeight str);
   Translate(dx, dy, g) →
      match dimensions g as (w, h) → (w + dx, h + dy)
};

// GraphicsElement → Num
let width = compose fst dimensions;

// GraphicsElement → Num
let height = compose snd dimensions;

// Num → List GraphicsElement → List GraphicsElement
let spaceRight = fun sep gs →
   zipW (uncurry x_translate) (iterate (length gs) (fun x → x + sep) 0) gs;

// List GraphicsElement → List GraphicsElement
let vcentre = fun gs →
   let max_h = max (map height gs) in
   map (fun g → y_translate ((max_h - height g) / 2) g) gs;

// List GraphicsElement → List GraphicsElement
let hcentre = fun gs → 
   let max_w = max (map width gs) in
   map (fun g → x_translate ((max_w - width g) / 2) g) gs;

// List GraphicsElement → List GraphicsElement
let vtop = fun gs →
   let max_h = max (map height gs) in
   map (fun g → y_translate (max_h - height g) g) gs;

// List GraphicsElement → List GraphicsElement
let hleft = fun gs →
   let max_w = max (map width gs) in
   map (fun g → x_translate (max_w - width g) g) gs;

// Unlike spaceRight, produces a nested structure.
// Num → List GraphicsElement → GraphicsElement
let stackRight = fun sep gs →
   foldr (fun (g, g') → Graphic([g, x_translate (width g + sep) g'])) Graphic([]) gs;

// Num → List GraphicsElement → GraphicsElement
let stackLeft = fun sep → compose (stackRight sep) reverse;

// Num → List GraphicsElement → GraphicsElement
let stackUp = fun sep gs →
   foldr (fun (g, g') → Graphic([g, y_translate (height g + sep) g'])) Graphic([]) gs;

// Num → List GraphicsElement → GraphicsElement
let stackDown = fun sep → compose (stackUp sep) reverse;

// Rect → Polygon
let renderRect = fun Rect(w, h) stroke fill → 
   Polygon([Point(0, 0), Point(w, 0), Point(w, h), Point(0, h)], stroke, fill);

let horizLine = fun x x' →
   Polyline([Point(x, 0), Point(x', 0)]);

let vertLine = fun y y' →
   Polyline([Point(0, y), Point(0, y')]);

// Heuristic saying how often to place a tick on an axis of length n.
// Num → Num
let tickEvery = fun n →
   let m = floor (logBase 10 n) in
   match n <= 2 * 10 ** m as {
      True → 2 * 10 ** (m - 1);
      False → 10 ** m
   };

// Return negative offset from x-axis; caller responsible for translating into positive space (if desired).
// Bool → Num → Num → (Num, Num) → Num → Num → (Num → Str) → (GraphicsElement, Num)
let axis = fun vert scale margin (start, end) tickSp tickLength labelFun →
   let tickSp' = tickSp * scale;
   let tick = vertLine 0 (negate tickLength);
   let firstTick = ceilingTo start tickSp;
   let n = floor ((end - firstTick) / tickSp) + 1;
   let ticks = spaceRight tickSp' (repeat n tick);
   let mkLabel = match vert as {
      True → fun str → Text(negate (textHeight str) / 2, negate (tickLength + textWidth str), str);
      False → fun str → Text(negate (textWidth str) / 2, negate (tickLength + textHeight str), str)
   };
   let labels = map (compose mkLabel labelFun) (iterate n (fun x → x + tickSp) firstTick);
   let labelStart = negate (min (map (fun Text(x, y, str) → y) labels));
   let labels' = spaceRight tickSp' labels;
   let line = horizLine 0 ((end - start) * scale);
   let axis = y_translate (negate margin)
      Graphic([line, x_translate ((firstTick - start) * scale) Graphic(concat ticks labels')])
   in
   (match vert as { True → transpose axis; False → axis }, margin + labelStart);

// Some numerical constants for charts; should parameterise by these instead.
let tickLength = 4;
let axisMargin = 0;

// List (Str, Num) → Num
let maxVal = compose max (map snd);

// Bar graph with categorical x-axis; before scaling, bars have unit spacing but are narrower.
// (Num, Num) → List (Str, Num) → GraphicsElement
let barGraph = fun (x_scale, y_scale) catData →
   let labelFun = fun n → fst (nth n catData) in
   match axis False x_scale axisMargin (-0.5, length catData - 0.5) 1 tickLength labelFun as (x_axis, y_offset) →
   let y_max = maxVal catData in 
   match (axis True y_scale axisMargin (0, y_max) (tickEvery y_max) tickLength) numToStr as (y_axis, x_offset) →
   let shrinkBy = 0.75; // ratio of bar width to bar spacing
   let mkBar = fun (k, v) → renderRect Rect(shrinkBy * x_scale, v * y_scale) "black" "#f6831e";
   let bars = x_translate ((1 - shrinkBy) / 2 * x_scale) // centre bars
      Graphic(spaceRight x_scale (map mkBar catData))
   in
   Translate(x_offset, y_offset, Graphic([bars, x_axis, y_axis]));

// Cross used to render points of a line plot.
// Num → Point → GraphicsElement
let plotPoint = fun radius Point(x, y) →
   Graphic([
      Polyline([Point(x - radius, y - radius), Point(x + radius, y + radius)]),
      Polyline([Point(x - radius, y + radius), Point(x + radius, y - radius)])
   ]);

// List Point → (Num, Num) → GraphicsElement
let linePlot = fun (x_scale, y_scale) ps →
   let ps' = map (fun Point(x, y) → Point(x * x_scale, y * y_scale)) ps;
   let points = map (plotPoint 2.5) ps'
   in
   Graphic([Polyline(ps'), ...points]);

// (Num, Num) → List (Num, Num) → Num → GraphicsElement
let lineGraph = fun (x_scale, y_scale) x_start numData →
   match axis False x_scale axisMargin (x_start, fst (last numData)) 1 tickLength numToStr as (x_axis, y_offset) →
   let y_max = maxVal numData in 
   match (axis True y_scale axisMargin (0, y_max) (tickEvery y_max) tickLength) numToStr as (y_axis, x_offset) →
   let ps = map (fun (x, y) → Point(x - x_start, y)) numData in
   Translate(x_offset, y_offset, Graphic([linePlot (x_scale, y_scale) ps, x_axis, y_axis]));

// Treats the element as located at (0, 0).
// Num → GraphicsElement → GraphicsElement
let bottomMargin = fun dh g →
   match dimensions g as (w, h) →
   Graphic([
      renderRect Rect(w, h + dh) "none" "none",
      y_translate dh g
   ]);

// TODO: compute bottom margin and sep from font-size.
// Str → GraphicsElement → GraphicsElement
let caption = fun text g →
   stackUp 8 (hcentre [bottomMargin 6 Text(0, 0, text), g])
